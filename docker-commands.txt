docker network create backend-network

docker volume create db-data

docker run -d \
  --name my-postgres-container \
  --network backend-network \
  -e POSTGRES_USER=postgres \
  -e POSTGRES_PASSWORD=admin123 \
  -e POSTGRES_DB=basic3tier \
  -p 5432:5432 \
  -v db-data:/var/lib/postgresql/data \
  postgres:latest

docker run -d \
  --name my-pgadmin-container \
  --network backend-network \
  -e PGADMIN_DEFAULT_EMAIL=darrenwildschut@capitecbank.co.za \
  -e PGADMIN_DEFAULT_PASSWORD=thisisapassword \
  -p 5050:80 \
  dpage/pgadmin4:latest

docker build -t my-node-api apinode
docker run -d \
  --name my-node-api-container \
  --network backend-network \
  -e DB_HOST=my-postgres-container \
  -e DB_USER=postgres \
  -e DB_PASSWORD=admin123 \
  -e DB_NAME=basic3tier \
  -p 81:3000 \
  my-node-api

docker build -t my-website-image ui
docker run -d \
  -p 80:80 \
  --name my-website-container \
  my-website-image:latest



EXAMPLES FOR ECR:
- aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 557701857917.dkr.ecr.ap-southeast-2.amazonaws.com/my-node-api-image
- docker tag my-node-api:latest 557701857917.dkr.ecr.ap-southeast-2.amazonaws.com/my-node-api-image:latest
- docker push 557701857917.dkr.ecr.ap-southeast-2.amazonaws.com/my-node-api-image:latest

deploy commands example:
kubectl apply -f deploy-api.yml